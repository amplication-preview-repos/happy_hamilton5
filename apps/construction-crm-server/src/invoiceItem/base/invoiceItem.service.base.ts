/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  InvoiceItem as PrismaInvoiceItem,
  Invoice as PrismaInvoice,
} from "@prisma/client";

export class InvoiceItemServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.InvoiceItemCountArgs, "select">
  ): Promise<number> {
    return this.prisma.invoiceItem.count(args);
  }

  async invoiceItems<T extends Prisma.InvoiceItemFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.InvoiceItemFindManyArgs>
  ): Promise<PrismaInvoiceItem[]> {
    return this.prisma.invoiceItem.findMany<Prisma.InvoiceItemFindManyArgs>(
      args
    );
  }
  async invoiceItem<T extends Prisma.InvoiceItemFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.InvoiceItemFindUniqueArgs>
  ): Promise<PrismaInvoiceItem | null> {
    return this.prisma.invoiceItem.findUnique(args);
  }
  async createInvoiceItem<T extends Prisma.InvoiceItemCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.InvoiceItemCreateArgs>
  ): Promise<PrismaInvoiceItem> {
    return this.prisma.invoiceItem.create<T>(args);
  }
  async updateInvoiceItem<T extends Prisma.InvoiceItemUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.InvoiceItemUpdateArgs>
  ): Promise<PrismaInvoiceItem> {
    return this.prisma.invoiceItem.update<T>(args);
  }
  async deleteInvoiceItem<T extends Prisma.InvoiceItemDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.InvoiceItemDeleteArgs>
  ): Promise<PrismaInvoiceItem> {
    return this.prisma.invoiceItem.delete(args);
  }

  async getInvoice(parentId: string): Promise<PrismaInvoice | null> {
    return this.prisma.invoiceItem
      .findUnique({
        where: { id: parentId },
      })
      .invoice();
  }
}
